{
 "Resources": {
  "botManagementGWapiC88FC329": {
   "Type": "AWS::ApiGateway::RestApi",
   "Properties": {
    "Name": "botManagement-GWapi"
   },
   "Metadata": {
    "aws:cdk:path": "BotManagement-Registration-Stack/botManagement-GWapi/Resource"
   }
  },
  "botManagementGWapiCloudWatchRoleF8BCC720": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "apigateway.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
       ]
      ]
     }
    ]
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "BotManagement-Registration-Stack/botManagement-GWapi/CloudWatchRole/Resource"
   }
  },
  "botManagementGWapiAccount57A267DD": {
   "Type": "AWS::ApiGateway::Account",
   "Properties": {
    "CloudWatchRoleArn": {
     "Fn::GetAtt": [
      "botManagementGWapiCloudWatchRoleF8BCC720",
      "Arn"
     ]
    }
   },
   "DependsOn": [
    "botManagementGWapiC88FC329"
   ],
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "BotManagement-Registration-Stack/botManagement-GWapi/Account"
   }
  },
  "botManagementGWapiBotManagementC4BC8CDD": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Fn::GetAtt": [
      "botManagementGWapiC88FC329",
      "RootResourceId"
     ]
    },
    "PathPart": "BotManagement",
    "RestApiId": {
     "Ref": "botManagementGWapiC88FC329"
    }
   },
   "Metadata": {
    "aws:cdk:path": "BotManagement-Registration-Stack/botManagement-GWapi/Default/BotManagement/Resource"
   }
  },
  "botManagementGWapiBotManagementv106C63D51": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Ref": "botManagementGWapiBotManagementC4BC8CDD"
    },
    "PathPart": "v1",
    "RestApiId": {
     "Ref": "botManagementGWapiC88FC329"
    }
   },
   "Metadata": {
    "aws:cdk:path": "BotManagement-Registration-Stack/botManagement-GWapi/Default/BotManagement/v1/Resource"
   }
  },
  "botManagementGWapiBotManagementv1POSTApiPermissionBotManagementRegistrationStackbotManagementGWapi36E19924POSTBotManagementv10D98EF92": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "AddBotLambda25A32D8F",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "botManagementGWapiC88FC329"
       },
       "/*/POST/BotManagement/v1"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "BotManagement-Registration-Stack/botManagement-GWapi/Default/BotManagement/v1/POST/ApiPermission.BotManagementRegistrationStackbotManagementGWapi36E19924.POST..BotManagement.v1"
   }
  },
  "botManagementGWapiBotManagementv1POSTApiPermissionTestBotManagementRegistrationStackbotManagementGWapi36E19924POSTBotManagementv1D58E89BB": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "AddBotLambda25A32D8F",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "botManagementGWapiC88FC329"
       },
       "/test-invoke-stage/POST/BotManagement/v1"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "BotManagement-Registration-Stack/botManagement-GWapi/Default/BotManagement/v1/POST/ApiPermission.Test.BotManagementRegistrationStackbotManagementGWapi36E19924.POST..BotManagement.v1"
   }
  },
  "botManagementGWapiBotManagementv1POST434C69B4": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "HttpMethod": "POST",
    "ResourceId": {
     "Ref": "botManagementGWapiBotManagementv106C63D51"
    },
    "RestApiId": {
     "Ref": "botManagementGWapiC88FC329"
    },
    "ApiKeyRequired": true,
    "AuthorizationType": "NONE",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":apigateway:",
        {
         "Ref": "AWS::Region"
        },
        ":lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "AddBotLambda25A32D8F",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    }
   },
   "Metadata": {
    "aws:cdk:path": "BotManagement-Registration-Stack/botManagement-GWapi/Default/BotManagement/v1/POST/Resource"
   }
  },
  "botManagementGWapiBotManagementv1DELETEApiPermissionBotManagementRegistrationStackbotManagementGWapi36E19924DELETEBotManagementv19394D29E": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "DeleteBotLambda6B24EC61",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "botManagementGWapiC88FC329"
       },
       "/*/DELETE/BotManagement/v1"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "BotManagement-Registration-Stack/botManagement-GWapi/Default/BotManagement/v1/DELETE/ApiPermission.BotManagementRegistrationStackbotManagementGWapi36E19924.DELETE..BotManagement.v1"
   }
  },
  "botManagementGWapiBotManagementv1DELETEApiPermissionTestBotManagementRegistrationStackbotManagementGWapi36E19924DELETEBotManagementv19280AB7E": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "DeleteBotLambda6B24EC61",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "botManagementGWapiC88FC329"
       },
       "/test-invoke-stage/DELETE/BotManagement/v1"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "BotManagement-Registration-Stack/botManagement-GWapi/Default/BotManagement/v1/DELETE/ApiPermission.Test.BotManagementRegistrationStackbotManagementGWapi36E19924.DELETE..BotManagement.v1"
   }
  },
  "botManagementGWapiBotManagementv1DELETE1241399A": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "HttpMethod": "DELETE",
    "ResourceId": {
     "Ref": "botManagementGWapiBotManagementv106C63D51"
    },
    "RestApiId": {
     "Ref": "botManagementGWapiC88FC329"
    },
    "ApiKeyRequired": true,
    "AuthorizationType": "NONE",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":apigateway:",
        {
         "Ref": "AWS::Region"
        },
        ":lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "DeleteBotLambda6B24EC61",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    }
   },
   "Metadata": {
    "aws:cdk:path": "BotManagement-Registration-Stack/botManagement-GWapi/Default/BotManagement/v1/DELETE/Resource"
   }
  },
  "botManagementGWapiBotManagementv1GETApiPermissionBotManagementRegistrationStackbotManagementGWapi36E19924GETBotManagementv145226063": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "GetBotLambda0C4EA18F",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "botManagementGWapiC88FC329"
       },
       "/*/GET/BotManagement/v1"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "BotManagement-Registration-Stack/botManagement-GWapi/Default/BotManagement/v1/GET/ApiPermission.BotManagementRegistrationStackbotManagementGWapi36E19924.GET..BotManagement.v1"
   }
  },
  "botManagementGWapiBotManagementv1GETApiPermissionTestBotManagementRegistrationStackbotManagementGWapi36E19924GETBotManagementv190480C08": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "GetBotLambda0C4EA18F",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "botManagementGWapiC88FC329"
       },
       "/test-invoke-stage/GET/BotManagement/v1"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "BotManagement-Registration-Stack/botManagement-GWapi/Default/BotManagement/v1/GET/ApiPermission.Test.BotManagementRegistrationStackbotManagementGWapi36E19924.GET..BotManagement.v1"
   }
  },
  "botManagementGWapiBotManagementv1GET56382E59": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "HttpMethod": "GET",
    "ResourceId": {
     "Ref": "botManagementGWapiBotManagementv106C63D51"
    },
    "RestApiId": {
     "Ref": "botManagementGWapiC88FC329"
    },
    "ApiKeyRequired": true,
    "AuthorizationType": "NONE",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":apigateway:",
        {
         "Ref": "AWS::Region"
        },
        ":lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "GetBotLambda0C4EA18F",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    }
   },
   "Metadata": {
    "aws:cdk:path": "BotManagement-Registration-Stack/botManagement-GWapi/Default/BotManagement/v1/GET/Resource"
   }
  },
  "botManagementGWapibotManagementGWapiUsagePlan071F23BB": {
   "Type": "AWS::ApiGateway::UsagePlan",
   "Properties": {
    "ApiStages": [
     {
      "ApiId": {
       "Ref": "botManagementGWapiC88FC329"
      },
      "Stage": {
       "Ref": "botManagementGWapistagetestFD35047E"
      },
      "Throttle": {}
     }
    ],
    "Quota": {
     "Limit": 10000000,
     "Period": "MONTH"
    },
    "Throttle": {
     "BurstLimit": 2,
     "RateLimit": 100
    },
    "UsagePlanName": "botManagement-GWapi-UsagePlan"
   },
   "Metadata": {
    "aws:cdk:path": "BotManagement-Registration-Stack/botManagement-GWapi/botManagement-GWapi-UsagePlan/Resource"
   }
  },
  "botManagementGWapibotManagementGWapiUsagePlanUsagePlanKeyResourceBotFatherGatewayAPIKeyStackregisterBotAPIKeyC83D29D7E235DFEC": {
   "Type": "AWS::ApiGateway::UsagePlanKey",
   "Properties": {
    "KeyId": {
     "Fn::ImportValue": "BotFather-Gateway-APIKey-Stack:ExportsOutputRefregisterBotAPIKeyCAA11D08CA849851"
    },
    "KeyType": "API_KEY",
    "UsagePlanId": {
     "Ref": "botManagementGWapibotManagementGWapiUsagePlan071F23BB"
    }
   },
   "Metadata": {
    "aws:cdk:path": "BotManagement-Registration-Stack/botManagement-GWapi/botManagement-GWapi-UsagePlan/UsagePlanKeyResource:BotFatherGatewayAPIKeyStackregisterBotAPIKeyC83D29D7"
   }
  },
  "AddBotLambdaServiceRole3893B7F5": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "BotManagement-Registration-Stack/AddBotLambda/ServiceRole/Resource"
   }
  },
  "AddBotLambdaServiceRoleDefaultPolicy840C6C96": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "secretsmanager:*",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:GetItem",
        "dynamodb:Scan",
        "dynamodb:ConditionCheckItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:PutItem",
        "dynamodb:UpdateItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":dynamodb:",
           {
            "Ref": "AWS::Region"
           },
           ":",
           {
            "Ref": "AWS::AccountId"
           },
           ":table/bots"
          ]
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "AddBotLambdaServiceRoleDefaultPolicy840C6C96",
    "Roles": [
     {
      "Ref": "AddBotLambdaServiceRole3893B7F5"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "BotManagement-Registration-Stack/AddBotLambda/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "AddBotLambda25A32D8F": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "f47324adc132a6d3c332ed1a1eaaca388b92df44f614d83a8bf11d4aa9e36374.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "AddBotLambdaServiceRole3893B7F5",
      "Arn"
     ]
    },
    "Environment": {
     "Variables": {
      "telegramFacingAPIurl": {
       "Fn::ImportValue": "telegramFacingAPIurl"
      },
      "api_version": "MessageBotIntegration/v1",
      "botsTable": "bots",
      "region": "us-east-1",
      "NODE_ENV": "production",
      "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
     }
    },
    "FunctionName": "botManagement-addBot-Lambda",
    "Handler": "index.handler",
    "Runtime": "nodejs16.x"
   },
   "DependsOn": [
    "AddBotLambdaServiceRoleDefaultPolicy840C6C96",
    "AddBotLambdaServiceRole3893B7F5"
   ],
   "Metadata": {
    "aws:cdk:path": "BotManagement-Registration-Stack/AddBotLambda/Resource",
    "aws:asset:path": "asset.f47324adc132a6d3c332ed1a1eaaca388b92df44f614d83a8bf11d4aa9e36374",
    "aws:asset:is-bundled": true,
    "aws:asset:property": "Code"
   }
  },
  "GetBotLambdaServiceRoleC26C83F1": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "BotManagement-Registration-Stack/GetBotLambda/ServiceRole/Resource"
   }
  },
  "GetBotLambdaServiceRoleDefaultPolicy4267B667": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "secretsmanager:*",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:GetItem",
        "dynamodb:Scan",
        "dynamodb:ConditionCheckItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:PutItem",
        "dynamodb:UpdateItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":dynamodb:",
           {
            "Ref": "AWS::Region"
           },
           ":",
           {
            "Ref": "AWS::AccountId"
           },
           ":table/bots"
          ]
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "GetBotLambdaServiceRoleDefaultPolicy4267B667",
    "Roles": [
     {
      "Ref": "GetBotLambdaServiceRoleC26C83F1"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "BotManagement-Registration-Stack/GetBotLambda/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "GetBotLambda0C4EA18F": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "e70cf4d83150f075be3e6a11d45115e5629a1702d100ad482eb9a99722fa317a.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "GetBotLambdaServiceRoleC26C83F1",
      "Arn"
     ]
    },
    "Environment": {
     "Variables": {
      "telegramFacingAPIurl": {
       "Fn::ImportValue": "telegramFacingAPIurl"
      },
      "api_version": "MessageBotIntegration/v1",
      "botsTable": "bots",
      "region": "us-east-1",
      "NODE_ENV": "production",
      "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
     }
    },
    "FunctionName": "botManagement-getBot-Lambda",
    "Handler": "index.handler",
    "Runtime": "nodejs16.x"
   },
   "DependsOn": [
    "GetBotLambdaServiceRoleDefaultPolicy4267B667",
    "GetBotLambdaServiceRoleC26C83F1"
   ],
   "Metadata": {
    "aws:cdk:path": "BotManagement-Registration-Stack/GetBotLambda/Resource",
    "aws:asset:path": "asset.e70cf4d83150f075be3e6a11d45115e5629a1702d100ad482eb9a99722fa317a",
    "aws:asset:is-bundled": true,
    "aws:asset:property": "Code"
   }
  },
  "DeleteBotLambdaServiceRoleEE3D337F": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "BotManagement-Registration-Stack/DeleteBotLambda/ServiceRole/Resource"
   }
  },
  "DeleteBotLambdaServiceRoleDefaultPolicyD016D023": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "secretsmanager:*",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:GetItem",
        "dynamodb:Scan",
        "dynamodb:ConditionCheckItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:PutItem",
        "dynamodb:UpdateItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":dynamodb:",
           {
            "Ref": "AWS::Region"
           },
           ":",
           {
            "Ref": "AWS::AccountId"
           },
           ":table/bots"
          ]
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "DeleteBotLambdaServiceRoleDefaultPolicyD016D023",
    "Roles": [
     {
      "Ref": "DeleteBotLambdaServiceRoleEE3D337F"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "BotManagement-Registration-Stack/DeleteBotLambda/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "DeleteBotLambda6B24EC61": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "ce4f360896ad7b1e9a074e0fe33fcdbfa58b5e72cbf9bbbb011a0a1a053d57ee.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "DeleteBotLambdaServiceRoleEE3D337F",
      "Arn"
     ]
    },
    "Environment": {
     "Variables": {
      "telegramFacingAPIurl": {
       "Fn::ImportValue": "telegramFacingAPIurl"
      },
      "api_version": "MessageBotIntegration/v1",
      "botsTable": "bots",
      "region": "us-east-1",
      "NODE_ENV": "production",
      "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
     }
    },
    "FunctionName": "botManagement-DeleteBot-Lambda",
    "Handler": "index.handler",
    "Runtime": "nodejs16.x"
   },
   "DependsOn": [
    "DeleteBotLambdaServiceRoleDefaultPolicyD016D023",
    "DeleteBotLambdaServiceRoleEE3D337F"
   ],
   "Metadata": {
    "aws:cdk:path": "BotManagement-Registration-Stack/DeleteBotLambda/Resource",
    "aws:asset:path": "asset.ce4f360896ad7b1e9a074e0fe33fcdbfa58b5e72cbf9bbbb011a0a1a053d57ee",
    "aws:asset:is-bundled": true,
    "aws:asset:property": "Code"
   }
  },
  "botManagementGWapideploymentFCDC562Aee9bdd434d929342a76b8f1158f53fb4": {
   "Type": "AWS::ApiGateway::Deployment",
   "Properties": {
    "RestApiId": {
     "Ref": "botManagementGWapiC88FC329"
    }
   },
   "DependsOn": [
    "botManagementGWapiBotManagementv1DELETE1241399A",
    "botManagementGWapiBotManagementv1GET56382E59",
    "botManagementGWapiBotManagementv1POST434C69B4"
   ],
   "Metadata": {
    "aws:cdk:path": "BotManagement-Registration-Stack/botManagement-GWapi-deployment/Resource"
   }
  },
  "botManagementGWapistagetestFD35047E": {
   "Type": "AWS::ApiGateway::Stage",
   "Properties": {
    "RestApiId": {
     "Ref": "botManagementGWapiC88FC329"
    },
    "DeploymentId": {
     "Ref": "botManagementGWapideploymentFCDC562Aee9bdd434d929342a76b8f1158f53fb4"
    },
    "MethodSettings": [
     {
      "DataTraceEnabled": false,
      "HttpMethod": "*",
      "LoggingLevel": "INFO",
      "MetricsEnabled": true,
      "ResourcePath": "/*"
     }
    ],
    "StageName": "test"
   },
   "DependsOn": [
    "botManagementGWapiAccount57A267DD"
   ],
   "Metadata": {
    "aws:cdk:path": "BotManagement-Registration-Stack/botManagement-GWapistage-test/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/21RS0/DMAz+LdxT85SAYzfEBQHTEOfKS01xmyZVnTBVVf87SbvBkDh9D1v5bOcKbu7h4gz3kumyyQzvYHzzqBsVrWLEjiv0tMcBxi2JzztW6w97QnOtXbBeRcuFXtMKhX7EoXfhz+Q/XZmsA3sXrGhj0Cbvf/FEg3qgzrihpRgSSycqzlnNETOZFGMbp3RmiU24cYb1kOTCJmWw3ZUIY7Kob1mE3Rz5GKz2kR9bCutKqgVeZjhWlVwXKEJeIE8QNayCbsinvaffxedqmottlZ5/Db4L/s89Il87W/KSmuKglvOvyzu4jT9SC3PWx8tyS7Bd8BsrcW23rQEAAA=="
   },
   "Metadata": {
    "aws:cdk:path": "BotManagement-Registration-Stack/CDKMetadata/Default"
   },
   "Condition": "CDKMetadataAvailable"
  }
 },
 "Outputs": {
  "botManagementGWapiTest": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Ref": "botManagementGWapiC88FC329"
      },
      ".execute-api.",
      {
       "Ref": "AWS::Region"
      },
      ".",
      {
       "Ref": "AWS::URLSuffix"
      },
      "/",
      {
       "Ref": "botManagementGWapistagetestFD35047E"
      },
      "/"
     ]
    ]
   },
   "Export": {
    "Name": "botManagement-GWapiTest"
   }
  }
 },
 "Conditions": {
  "CDKMetadataAvailable": {
   "Fn::Or": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "af-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-northwest-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "sa-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-2"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-2"
       ]
      }
     ]
    }
   ]
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}