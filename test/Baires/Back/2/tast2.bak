const q1 = [
    ['ADD_FILE', '/dir/file.txt', '10'],
    ['GET_FILE_SIZE', '/dir/file.txt']
];

const q2 = [
    ['ADD_FILE', '/directory/dir/file1.txt', '15'],
    ['ADD_FILE', '/file2', '79'],
    ['GET_FILE_SIZE', '/directory/dir/file1.txt'],
    ['GET_FILE_SIZE', '/directory/dir/file1.txt'],
    ['GET_FILE_SIZE', '/file2']
];

const q3 = [
    ['ADD_FILE', '/directory/dir/file1.txt', '15'],
    ['ADD_FILE', '/file2', '79'],
    ['ADD_FILE', '/file2', '79'],
    ['GET_FILE_SIZE', '/directory/dir/file1.txt'],
    ['GET_FILE_SIZE', '/directory/dir/file1.txt'],
    ['GET_FILE_SIZE', '/file2']
];

const q4 = [
    ['ADD_FILE', '/directory/dir/file1.txt', '15'],
    ['ADD_FILE', '/file2', '79'],
    ['ADD_FILE', '/file2', '79'],
    ['COPY_FILE', '/file2', '/file3'],
    ['GET_FILE_SIZE', '/directory/dir/file1.txt'],
    ['GET_FILE_SIZE', '/directory/dir/file1.txt'],
    ['GET_FILE_SIZE', '/file2']
];

const q5 = [
    ['ADD_FILE', '/dir/file.txt', '10'],
    ['FIND_FILE', '/dir', 'file.txt']
];

const q6 = [
    ['ADD_FILE', '/dir/file.txt', '10'],
    ['ADD_FILE', '/dir/dir/file.txt', '15'],
    ['FIND_FILE', '/dir', 'file.txt']
];

type FileType = {
    id: string;
    name: string;
    fileSize: number;
};
class FileManager {
    private files: Map<string, FileType>;
    constructor() {
        this.files = new Map<string, FileType>();
    }

    private FindFileById(id: string) {
        const file = this.files.get(id);
        if (file) {
            return file;
        } else {
            return false;
        }
    }

    public AddFile(value: { name: string; fileSize: string }) {
        const newFile: FileType = {
            id: value.name,
            name: value.name,
            fileSize: Number(value.fileSize)
        };

        const existingFile = this.FindFileById(value.name);
        if (existingFile === false) {
            ///add file
            this.files.set(value.name, newFile);
            return true;
        } else {
            return false;
        }
    }

    public GetFileSizeById(id: string) {
        const existingFile = this.FindFileById(id);
        if (existingFile === false) {
            //file not exists
            return false;
        } else {
            return existingFile.fileSize;
        }
    }

    public CopyFile(pathFrom: string, pathTo: string) {
        //check if From exists
        const existingFile = this.FindFileById(pathFrom);
        const newFile = this.FindFileById(pathTo);
        if (existingFile === false) {
            return false;
        }
        if (newFile !== false) {
            return false;
        }
        this.AddFile({
            name: pathTo,
            fileSize: String(existingFile.fileSize)
        });
        return true;
    }

    public FindFileByPreSuf(prefix: string, suffix: string) {
        const foundFiles: FileType[] = [];
        for (const file of this.files) {
            if (file[1].name.startsWith(prefix) && file[1].name.endsWith(suffix)) {
                foundFiles.push(file[1]);
            }
        }
        foundFiles.sort((a, b) => {
            if (a.fileSize < b.fileSize) {
                return 1;
            }
            if (a.fileSize < b.fileSize) {
                return -1;
            }
            if (a.name > b.name) {
                return 1;
            }
            if (a.name < b.name) {
                return -1;
            }
            return 1;
        });

        let resultString = '';
        for (const row of foundFiles) {
            if (resultString !== '') {
                resultString = resultString + ', ';
            }
            resultString = resultString + row.name + '(' + row.fileSize + ')';
        }
        return resultString;
    }
}
function solution(queries: string[][]) {
    const fileManager = new FileManager();
    const solutionResult: string[] = [];
    for (const row of queries) {
        if (row[0] === 'ADD_FILE') {
            const result = fileManager.AddFile({ name: row[1], fileSize: row[2] });
            solutionResult.push(String(result));
        }
        if (row[0] === 'GET_FILE_SIZE') {
            const result = fileManager.GetFileSizeById(row[1]);
            const processedResult = result === false ? '' : String(result);
            solutionResult.push(processedResult);
        }
        if (row[0] === 'COPY_FILE') {
            const result = fileManager.CopyFile(row[1], row[2]);
            solutionResult.push(String(result));
        }
        if (row[0] === 'FIND_FILE') {
            const result = fileManager.FindFileByPreSuf(row[1], row[2]);
            solutionResult.push(String(result));
        }
    }

    return solutionResult;
}

const res = solution(q6);
console.log(res);
